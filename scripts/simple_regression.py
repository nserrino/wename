import matplotlib
matplotlib.use('TkAgg')

import argparse
import matplotlib.pyplot as plt
import numpy as np
import json
import os
import pickle

from sklearn import datasets, linear_model
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
from pathlib import Path

parser = argparse.ArgumentParser(description='Train a model to predict the next maximum of a name.')
parser.add_argument('--data', required=True, default=None, help='Path to the input training/test sets generated by generate_training_set.py')
parser.add_argument('--plot', dest='plot', action='store_true', help='If passed, a plot will be made')
args = parser.parse_args()

sets = pickle.load(open(args.data, 'rb'))

for maxi in sets['train']:
	if maxi['input_maximum_percentage'] > 0.03:
		print(maxi['id'])

training = {
	# Input to model is stored as an array of arrays so it can support multiple features
	'input_maximum_percentage': [[input_train['input_maximum_percentage']] for input_train in sets['train']],
	# Outputs like these two are represented as an array
	'next_maximum_percentage': [input_train['next_maximum_percentage'] for input_train in sets['train']],
	'next_maximum_time': [input_train['next_maximum_time'] for input_train in sets['train']]
}

test = {
	'input_maximum_percentage': [[input_train['input_maximum_percentage']] for input_train in sets['test']],
	'next_maximum_percentage': [input_train['next_maximum_percentage'] for input_train in sets['test']],
	'next_maximum_time': [input_train['next_maximum_time'] for input_train in sets['test']]
}

# Predict the size of the next maximum
regr = linear_model.LinearRegression()
regr.fit(training['input_maximum_percentage'], training['next_maximum_percentage'])
next_maximum_percentage_predictions = regr.predict(test['input_maximum_percentage'])

print('Variance score: %.2f (1 is best)' % r2_score(test['next_maximum_percentage'], next_maximum_percentage_predictions))

if args.plot:
	plt.figure()
	plt.scatter(test['input_maximum_percentage'], test['next_maximum_percentage'],  color='black')
	plt.plot(test['input_maximum_percentage'], next_maximum_percentage_predictions, color='blue', linewidth=3)

	plt.title('Predicting size of next maximum')
	plt.xlabel('Size of Nth maximum (percent)')
	plt.ylabel('Size of N+1th maximum (percent)')


# Predict number of years til next maximum
regr2 = linear_model.LinearRegression()
regr2.fit(training['input_maximum_percentage'], training['next_maximum_time'])
next_maximum_time_predictions = regr2.predict(test['input_maximum_percentage'])

print('Variance score: %.2f (1 is best)' % r2_score(test['next_maximum_time'], next_maximum_time_predictions))

if args.plot:
	plt.figure()
	plt.scatter(test['input_maximum_percentage'], test['next_maximum_time'],  color='black')
	plt.plot(test['input_maximum_percentage'], next_maximum_time_predictions, color='blue', linewidth=3)

	plt.title('Predicting number of years until the next maximum')
	plt.xlabel('Size of Nth maximum (percent)')
	plt.ylabel('Time until the N+1th maximum (years)')

	plt.show()
